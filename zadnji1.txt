//////////////////////////////////////////////////////////////////////////////
// *
// * Predmetni projekat iz predmeta PNRSuOS
// * Godina: 2018
// *
// * Zadatak: Generator DTMF signala
// * Autor:
// *                                                                          
// *                                                                          
//////////////////////////////////////////////////////////////////////////////
#include "stdio.h"
#include "ezdsp5535.h"
#include "ezdsp5535_i2c.h"
#include "aic3204.h"
#include "ezdsp5535_aic3204_dma.h"
#include "ezdsp5535_i2s.h"
#include "ezdsp5535_sar.h"
#include "print_number.h"
#include "gen_sinus.h"
#include "math.h"

/* Frekvencija odabiranja */
#define SAMPLE_RATE 8000L

#define PI 3.14159265

/* Niz za smestanje izlaznih odbiraka */
#pragma DATA_ALIGN(OutputBuffer,4)
Int16 OutputBuffer[AUDIO_IO_SIZE];

Int16 OutputBuffer1[AUDIO_IO_SIZE];
Int16 OutputBuffer2[AUDIO_IO_SIZE];

void main( void )
{   
		int i;
		//int delta = 224;

		float ph1,ph2,fh,fl;
		float fh1 = 1400;
		//float fh2,fh3,fh4,fl2,fl3,fl4;
		float fl1 = 960;
		char n;

    /* Inicijalizaija razvojne ploce */
    EZDSP5535_init( );
    /* Inicijalizacija kontrolera za ocitavanje vrednosti pritisnutog dugmeta*/
    EZDSP5535_SAR_init();
    /* Inicijalizacija LCD kontrolera */
    initPrintNumber();
	printf("\n DTMF Predajnik\n");
    /* Inicijalizacija veze sa AIC3204 kodekom (AD/DA) */
    aic3204_hardware_init();
    /* Inicijalizacija AIC3204 kodeka */
	aic3204_init();
    aic3204_dma_init();
    /* Postavljanje vrednosti frekvencije odabiranja i pojacanja na kodeku */
    set_sampling_frequency_and_gain(SAMPLE_RATE, 0);

	while(1)
	{
		/* Popunjavanje DMA bafera sa nulama (Ping i Pong) kako bi na izlazu bila emitovana tisina */
//		for(j=0; j < AUDIO_IO_SIZE; j++)
//		{
//			OutputBuffer[j] = 0;
//		}
//		for(i = 0; i < 2; i++)
//		{
//			aic3204_write_block(OutputBuffer, OutputBuffer);
//		}
		/* TODO : geresiati DTMF tonove u zavisnosti od odabranog karaktera */
		//gen_sinus_table(1000, 10, 0.01452,0,OutputBuffer);
		//gen_sinus_table(AUDIO_IO_SIZE, 16000, fh1/SAMPLE_RATE,ph,OutputBuffer);
		n = '*';
		switch(n)
		{
					case '0':
						fh = fh1 + 600; //2000
						fl = fl1 + 240; // 1200
						break;
					case '1':
						fh = fl1 + 440; //1400
						fl = fl1; //960
						break;
					case '2':
						fh = fh1 + 600;//2000
						fl = fl1;//960
						break;
					case '3':
						fh = fh1 + 760;//2160
						fl = fl1;//960
						break;
					case '4':
						fh = fl1 + 440;//1400
						fl = fl1 + 80;//1040
						break;
					case '5':
						fh = fh1 + 600;//2000
						fl = fl1 + 80;//1040
						break;
					case '6':
						fh = fh1 + 760;//2160
						fl = fl1 + 80;//1040
						break;
					case '7':
						fh = fl1 + 440;//1400
						fl = fl1 + 160;//1120
						break;
					case '8':
						fh = fh1 + 600;//2000
						fl = fl1 + 160;//1120
						break;
					case '9':
						fh = fh1 + 760;//2160
						fl = fl1 + 160;//1120
						break;
					case 'A':
						fh = fh1 + 920;//2320
						fl = fl1;//960
						break;
					case 'B':
						fh = fh1 + 920;//2320
						fl = fl1 + 80;//1040
						break;
					case 'C':
						fh = fh1 + 920;//2320
						fl = fl1 + 160;//1120
						break;
					case 'D':
						fh = fh1 + 920;//2320
						fl = fl1 + 240;//1200
						break;
					case '*':
						fh = fl1 + 440;//1400
						fl = fl1 + 240;//1200
						break;
					case '#':
						fh = fh1 + 760;//2160
						fl = fl1 + 240;//1200
						break;
					default:
						break;
		}
		ph1 = fmod(AUDIO_IO_SIZE*2*PI*fh/SAMPLE_RATE,2*PI);
		ph2 = fmod(AUDIO_IO_SIZE*2*PI*fl/SAMPLE_RATE,2*PI);

		gen_sinus_table(AUDIO_IO_SIZE, 16000, fh/SAMPLE_RATE,ph1,OutputBuffer1);
		gen_sinus_table(AUDIO_IO_SIZE, 16000, fl/SAMPLE_RATE,ph2,OutputBuffer2);

		for(i = 0; i < AUDIO_IO_SIZE; ++i){
			OutputBuffer[i] = OutputBuffer1[i] + OutputBuffer2[i];
		}

		aic3204_write_block(OutputBuffer, OutputBuffer);
	}
    	
	/* Prekid veze sa AIC3204 kodekom */
    aic3204_disable();

    printf( "\n***Kraj programa***\n" );
	SW_BREAKPOINT;
}

