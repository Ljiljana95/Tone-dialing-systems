//////////////////////////////////////////////////////////////////////////////
// *
// * Predmetni projekat iz predmeta PNRSuOS
// * Godina: 2018
// *
// * Zadatak: Generator DTMF signala
// * Autor: Popovic Ljiljana EE72/2014
// *                                                                          
// *                                                                          
//////////////////////////////////////////////////////////////////////////////

#include "stdio.h"
#include "ezdsp5535.h"
#include "ezdsp5535_i2c.h"
#include "aic3204.h"
#include "ezdsp5535_aic3204_dma.h"
#include "ezdsp5535_i2s.h"
#include "ezdsp5535_sar.h"
#include "print_number.h"
#include "gen_sinus.h"
#include "math.h"
#include "sin_table.h"


/* Frekvencija odabiranja */
#define SAMPLE_RATE 8000L

#define PI 3.14159265

/* Niz za smestanje izlaznih odbiraka */
#pragma DATA_ALIGN(OutputBuffer,4)
Int16 OutputBuffer[AUDIO_IO_SIZE];
Int16 OutputBuffer1[AUDIO_IO_SIZE];//levi
Int16 OutputBuffer2[AUDIO_IO_SIZE];//desni

		float ph1,ph2,fh,fl;
		char n; //koji karakter je upisan
		//int br=0;
		//Uint16 taster = NoKey;

void main( void )
{   
		int i,j;
	
    /* Inicijalizaija razvojne ploce */
    EZDSP5535_init( );
	
    /* Inicijalizacija kontrolera za ocitavanje vrednosti pritisnutog dugmeta*/
    EZDSP5535_SAR_init();
	
    /* Inicijalizacija LCD kontrolera */
    initPrintNumber();
	
	printf("\n DTMF Predajnik\n");
	
    /* Inicijalizacija veze sa AIC3204 kodekom (AD/DA) */
    aic3204_hardware_init();
	
    /* Inicijalizacija AIC3204 kodeka */
	aic3204_init();
    aic3204_dma_init();
	
    /* Postavljanje vrednosti frekvencije odabiranja i pojacanja na kodeku */
    set_sampling_frequency_and_gain(SAMPLE_RATE, 0);

	/*while(taster != SW2){
		taster=EZDSP5535_SAR_getKey();
		if(taster == SW1){
			br++;
			
			if(br >= 17){
				br = 0;
			}
		}
	}*/
	
	
	while(1) //while(taster ==SW2)
	{
		/* Popunjavanje DMA bafera sa nulama (Ping i Pong) kako bi na izlazu bila emitovana tisina */
		for(j=0; j < AUDIO_IO_SIZE; j++)
		{
			OutputBuffer[j] = 0;
			OutputBuffer1[j] = 0;
			OutputBuffer2[j] = 0;
			
		}
		
		
//		for(i = 0; i < 2; i++)
//		{
//			aic3204_write_block(OutputBuffer, OutputBuffer);
//		}

		/* TODO : geresiati DTMF tonove u zavisnosti od odabranog na */
		
		/*
			switch (br)
			{
				case 1: 
						n='1';
						break;
				case 2:
						n='2';
						break;
				case 3:
						n='3';
						break;
				case 4: 
						n='4';
						break;
				case 5:
						n='5';
						break;
				case 6: 
						n='6';
						break;
				case 7: 
						n='7';
						break;
				case 8: 
						n='8';
						break;
				case 9: 
						n='9';
						break;
				case 10: 
						n='0';
						break;
				case 11:
						n='A';
						break;
				case 12: 
						n='B';
						break;
				case 13:
						n='C';
						break;
				case 14: 
						n='D';
						break;
				case 15:
						n='*';
						break;
				case 16:
						n='#';
						break;
				default : 
						n= 'M';
						break;
			}

		}*/
		
		n = '*';
		switch(n)
		{
					case '0':
						fl = 1200.0;
						fh = 2000.0;
						break;
					case '1':
						fl = 960.0;
						fh = 1400.0;
						break;
					case '2':
						fl = 960.0;
						fh = 2000.0;
						break;
					case '3':
						fl = 960.0;
						fh = 2160.0;
						break;
					case '4':
						fl = 1040.0;
						fh = 1400.0;
						break;
					case '5':
						fl = 1040.0;
						fh = 2000.0;
						break;
					case '6':
						fl = 1040.0;
						fh = 2160.0;
						break;
					case '7':
						fl = 1120.0;
						fh = 1400.0;
						break;
					case '8':
						fl = 1120.0;
						fh = 2000.0;
						break;
					case '9':
						fl = 1120.0;
						fh = 2160.0;
						break;
					case 'A':
						fl = 960.0;
						fh = 2320.0;
						break;
					case 'B':
						fl = 1040.0;
						fh = 2320.0;
						break;
					case 'C':
						fl = 1120.0;
						fh = 2320.0;
						break;
					case 'D':
						fl = 1200.0;
						fh = 2320.0;
						break;
					case '*':
						fl = 1200.0;
						fh = 1400.0;
						break;
					case '#':
						fl = 1200.0;
						fh = 2160.0;
						break;
					default:
						break;
		}
		
			ph1 = fmod(AUDIO_IO_SIZE*2*PI*fl/SAMPLE_RATE,2*PI);
			gen_sinus_table(AUDIO_IO_SIZE, 16000, fl/SAMPLE_RATE,ph1,OutputBuffer1);
			
			ph2 = fmod(AUDIO_IO_SIZE*2*PI*fh/SAMPLE_RATE,2*PI);
			gen_sinus_table(AUDIO_IO_SIZE, 16000, fh/SAMPLE_RATE,ph2,OutputBuffer2);

			for(j = 0; j < AUDIO_IO_SIZE; j++){
				OutputBuffer[j] = OutputBuffer1[j] + OutputBuffer2[j];
			}
			////char novi = printChar(n);
			
			
			/*
				//sum
			rand16init();
			Int16 noise[AUDIO_IO_SIZE];
			rand16(noise,AUDIO_IO_SIZE);
			
			for(j = 0; j < AUDIO_IO_SIZE; j++){
				OutputBuffer[j] = OutputBuffer1[j] + OutputBuffer2[j];
				OutputBuffer[j] = OutputBuffer1[j] + noise[j];
			}
			
			*/
			
			aic3204_write_block(OutputBuffer, OutputBuffer);
			taster=EZDSP5535_SAR_getKey();
	}
	
    	
	/* Prekid veze sa AIC3204 kodekom */
    aic3204_disable();

    printf( "\n***Kraj programa***\n" );
	SW_BREAKPOINT;
}

