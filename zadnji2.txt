//////////////////////////////////////////////////////////////////////////////
// *
// * Predmetni projekat iz predmeta PNRSuOS
// * Godina: 2018
// *
// * Zadatak: Prijemnik DTMF signala
// * Autor:
// *                                                                          
// *                                                                          
//////////////////////////////////////////////////////////////////////////////

#include "stdio.h"
#include "ezdsp5535.h"
#include "ezdsp5535_i2c.h"
#include "aic3204.h"
#include "ezdsp5535_aic3204_dma.h"
#include "ezdsp5535_i2s.h"
#include "print_number.h"
#include "math.h"
#include "Dsplib.h"
#include "window.h"

/* Frekvencija odabiranja */
#define SAMPLE_RATE 8000L

#define MAX(x, y) (((x) > (y)) ? (x) : (y))

#define PI 3.14159265

/* Velicina prozora za racunanje FFT-a */
/* TODO Dodeliti velicinu bloka kod racunanja FFT*/
#define FFT_SIZE 256

/* Granica definisana od strane korisnika */
/* TODO Dodeliti vrednost */
#define TRESHOLD 80

/* Niz za smestanje odbiraka ulaznog signala */
#pragma DATA_ALIGN(InputBufferL,4)
Int16 InputBufferL[AUDIO_IO_SIZE];
Int16 OutputBufferL[AUDIO_IO_SIZE];
Int16 OutputBufferLP[AUDIO_IO_SIZE];
Int16 OutputBufferLP1[AUDIO_IO_SIZE];
Int16 OutputBufferTemp[AUDIO_IO_SIZE];

#pragma DATA_ALIGN(InputBufferR,4)
Int16 InputBufferR[AUDIO_IO_SIZE];
Int16 OutputBufferR[AUDIO_IO_SIZE];
Int16 OutputBufferRP[AUDIO_IO_SIZE];
Int16 OutputBufferRP1[AUDIO_IO_SIZE];

void main( void )
{   
	int i,j,k,m=0,br=0;
	char simbol;
	char tmp = simbol;

	//int delta = 224;
	//Int16 temp=0;
	Int16 indl[4];
	Int16 indh[4];
	//Uint_16 = taster;

	/* Inicijalizaija razvojne ploce */
	EZDSP5535_init( );

    /* Inicijalizacija LCD kontrolera */
	initPrintNumber();

	printf("\n DTMF Prijemnik\n");

    /* Inicijalizacija veze sa AIC3204 kodekom (AD/DA) */
    aic3204_hardware_init();
	
    /* Inicijalizacija AIC3204 kodeka */
	aic3204_init();

    aic3204_dma_init();

    /* Postavljanje vrednosti frekvencije odabiranja i pojacanja na kodeku */
    set_sampling_frequency_and_gain(SAMPLE_RATE, 0);

    indl[0] = round((float) 960/SAMPLE_RATE * AUDIO_IO_SIZE);
    indl[1] = round((float) 1040/SAMPLE_RATE * AUDIO_IO_SIZE);
    indl[2] = round((float) 1120/SAMPLE_RATE * AUDIO_IO_SIZE);
    indl[3] = round((float) 1200/SAMPLE_RATE * AUDIO_IO_SIZE);

    indh[0] = round((float) 1400/SAMPLE_RATE * AUDIO_IO_SIZE);
    indh[1] = round((float) 2000/SAMPLE_RATE * AUDIO_IO_SIZE);
    indh[2] = round((float) 2160/SAMPLE_RATE * AUDIO_IO_SIZE);
    indh[3] = round((float) 2320/SAMPLE_RATE * AUDIO_IO_SIZE);

    printf("%d\n",indl);
    printf("%d\n",indh);


    while(1)
	{
		aic3204_read_block(InputBufferL, InputBufferR);
		/* TODO */
		//prozoriranje
		for(i = 0; i < WINDOW_SIZE; i++){
			OutputBufferL[i] = _smpy(InputBufferL[i],p_window[i]);
			OutputBufferR[i] = _smpy(InputBufferR[i],p_window[i]);
		}
		rfft(OutputBufferL,AUDIO_IO_SIZE,SCALE);
		rfft(OutputBufferR,AUDIO_IO_SIZE,SCALE);

		//snaga
		for(j=0, k=0; k < AUDIO_IO_SIZE/2; j = j+2, k++)
		{
			OutputBufferLP[k] = _smpy(OutputBufferL[j],OutputBufferL[j]) + _smpy(OutputBufferL[j+1],OutputBufferL[j+1]);
			OutputBufferRP[k] = _smpy(OutputBufferR[j],OutputBufferR[j]) + _smpy(OutputBufferR[j+1],OutputBufferR[j+1]);
		}
	}

		//PRAG
		int ind=0,indeks_l=0,indeks_h=0;

			for(k=0;k<AUDIO_IO_SIZE/2;k++)
			{
				if(OutputBufferLP[k]-OutputBufferLP[k+1]>TRESHOLD)
				{
					ind=k+1;
					for(m=0;m<4;m++)
					{
						if(ind==indl[m])
							indeks_l=m;
					}
					for(m=0;m<4;m++)
					{
						if(ind==indh[m])
							indeks_h=m;
					}
				}
			}

		    printf("%d\n",indeks_l);
			printf("%d\n",indeks_h);


			if(indeks_l == 0 && indeks_h==0 )
							simbol = '1';
			else if(indeks_l == 0 && indeks_h==1)
							simbol = '2';
			else if(indeks_l == 0 && indeks_h==2)
							simbol = '3';
			else if(indeks_l == 0 && indeks_h==3)
							simbol = 'A';
			else if(indeks_l == 1 && indeks_h==0)
							simbol = '4';
			else if(indeks_l == 1 && indeks_h==1)
							simbol = '5';
			else if(indeks_l == 1 && indeks_h==2)
							simbol = '6';
			else if(indeks_l == 1 && indeks_h==3)
							simbol = 'B';
			else if(indeks_l == 2 && indeks_h==0)
							simbol = '7';
			else if(indeks_l == 2 && indeks_h==1)
							simbol = '8';
			else if(indeks_l == 2 && indeks_h==2)
							simbol = '9';
			else if(indeks_l == 2 && indeks_h==3)
							simbol = 'C';
			else if(indeks_l == 3 && indeks_h==0)
							simbol = '*';
			else if(indeks_l == 3 && indeks_h==1)
							simbol = '0';
			else if(indeks_l == 3 && indeks_h==2)
							simbol = '#';
			else if(indeks_l == 3 && indeks_h==3)
							simbol = 'D';
			else
				simbol = 'K';

			printf("%c\n", simbol);

			if(tmp == simbol)
				br++;
			else
				br = 0;

			if(br == 8)
				printf("%c\n", simbol);
				br = 0;


    	
	/* Prekid veze sa AIC3204 kodekom */
    aic3204_disable();

    printf( "\n***Kraj programa***\n" );
	SW_BREAKPOINT;
}
